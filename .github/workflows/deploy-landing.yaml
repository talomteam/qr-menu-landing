name: Deploy landing

on:
  push:
    branches:
      - "main"
env:
  IMAGE_NAME: landing
  IMAGE_TAG: latest
  DEPLOYMENT_NAME: orders-landing-deployment
  DEPLOYMENT_HOST: ${{ vars.DEPLOYMENT_HOST }}
  NAMESPACE: landing

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker
        run: |
          echo '{ "insecure-registries": ["${{ env.DEPLOYMENT_HOST }}"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --build-arg GITHUB_TOKEN=${{ secrets.GIT_TOKEN }} --build-arg NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }} --build-arg NEW_RELIC_APPNAME=${{ env.NEW_RELIC_APPNAME }}  --build-arg NEW_RELIC_AGENT_VERSION=${{ env.NEW_RELIC_AGENT_VERSION }} --build-arg NEW_RELIC_DAEMON_ADDRESS=${{ env.NEW_RELIC_DAEMON_ADDRESS }} .
          echo ${{ secrets.DOCKER_REGISTRY_PASSWORD }} | docker login ${{ env.DEPLOYMENT_HOST }} -u ${{ secrets.DOCKER_REGISTRY_USERNAME }} --password-stdin
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.DEPLOYMENT_HOST }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.DEPLOYMENT_HOST }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      - name: Deploy to Kubernetes
        run: |
          kubectl config set-cluster my-cluster --server=${{ secrets.KUBE_SERVER }} --insecure-skip-tls-verify=true
          kubectl config set-credentials my-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context my-context --cluster=my-cluster --user=my-user
          kubectl config use-context my-context
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} ${{ env.IMAGE_NAME }}=${{ env.DEPLOYMENT_HOST }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -n ${{ env.NAMESPACE }}
          kubectl rollout restart deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}